//
//  CourseDetailsViewController.swift
//  CoursesList
//
//  Created by Kairzhan Kural on 9/24/20.
//  Copyright (c) 2020 Kairzhan Kural. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CourseDetailsDisplayLogic: class {
    func displayDetails(viewModel: CourseDetails.ShowDetails.ViewModel)
    func displayImageForFavouriteButton(viewModel: CourseDetails.SetFavouriteStatus.ViewModel)
}

class CourseDetailsViewController: UIViewController {
    
    @IBOutlet var courseName: UILabel!
    @IBOutlet var courseImage: UIImageView!
    @IBOutlet var numberOfLessons: UILabel!
    @IBOutlet var numberOfTests: UILabel!
    @IBOutlet var favouriteButton: UIButton!
    
    var interactor: CourseDetailsBusinessLogic?
    var router: (NSObjectProtocol & CourseDetailsRoutingLogic & CourseDetailsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        showDetails()
    }
    
    @IBAction func toggleFavourite(_ sender: UIButton) {
        interactor?.setFavouriteStatus()
    }
    
    // MARK: Do something
    func showDetails() {
        let request = CourseDetails.ShowDetails.Request()
        interactor?.showDetails(request: request)
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CourseDetailsInteractor()
        let presenter = CourseDetailsPresenter()
        let router = CourseDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}

extension CourseDetailsViewController: CourseDetailsDisplayLogic {
    func displayDetails(viewModel: CourseDetails.ShowDetails.ViewModel) {
        courseName.text = viewModel.displayedDetails.courseName
        numberOfLessons.text = viewModel.displayedDetails.numberOfLessons
        numberOfTests.text = viewModel.displayedDetails.numberOfTests
        
        guard let image = viewModel.displayedDetails.imageData else { return }
        courseImage.image = UIImage(data: image)
        
        let favouriteImage = viewModel.displayedDetails.isFavourite ? #imageLiteral(resourceName: "like-2") : #imageLiteral(resourceName: "like")
        favouriteButton.setImage(favouriteImage, for: .normal)
    }
    
    func displayImageForFavouriteButton(viewModel: CourseDetails.SetFavouriteStatus.ViewModel) {
        
        let favouriteImage = viewModel.isFavourite ? #imageLiteral(resourceName: "like-2") : #imageLiteral(resourceName: "like")
        favouriteButton.setImage(favouriteImage, for: .normal)
    }
}
